# Click Activate Cloud Shell Activate Cloud Shell icon at the top of the Google Cloud console.
#  list the active account name:
gcloud auth list
# list the project ID :
gcloud config list project

# Add data for lab
# to create a bucket in your current project, then add the data needed to build a table for this lab:
PROJECT_ID=`gcloud config get-value project`
BUCKET=${PROJECT_ID}-bucket
gsutil mb gs://$BUCKET
gsutil cp -r gs://spls/gsp431/* gs://$BUCKET


# Task 1. Train a model using BigQuery machine learning
# open the Navigation menu and select BigQuery.
# Click DONE . 

# In the left pane, under Explorer section,
# click on the View actions icon next to your project ID, then select Create dataset.
# For Dataset ID, type helpdesk.
# Select us(multiple regions in United States) as the location.
# Click Create dataset.
# In the left menu, click the View actions icon next to helpdesk dataset you just created, then select Open in > New Tab.
# Click Create table.

# Use the following parameters to create a new table leaving the defaults for all other fields:
Properties - Values
Create table from - Google Cloud Storage
Select file from GCS bucket YOUR BUCKET/ml/issues.csv
File format - CSV
Table name - issues
Auto detect - Check the check-box for Schema
Advanced options > Header rows to skip - 1

# Note: Replace YOUR BUCKET with the bucket id through Navigation menu > Cloud Storage.
# Click Create table.


# In BigQuery click + Compose new query and add the following query:
SELECT * FROM `helpdesk.issues` LIMIT 1000


# category and resolutiontime are used to build a machine learning model that predicts how long it 
# will take to resolve an issue. The model type is a simple linear regression, and the trained model
#  will be named predict_eta_v0 in the helpdesk dataset.:
CREATE OR REPLACE MODEL `helpdesk.predict_eta_v0`
OPTIONS(model_type='linear_reg') AS
SELECT
 category,
 resolutiontime as label
FROM
  `helpdesk.issues`

# to evaluate the machine learning model you just created. The metrics generated by this query tell us how well the model is likely to perform.
WITH eval_table AS (
SELECT
 category,
 resolutiontime as label
FROM
  helpdesk.issues
)
SELECT
  *
FROM
  ML.EVALUATE(MODEL helpdesk.predict_eta_v0,
    TABLE eval_table)


# We are going to use a few more fields during training and see if there is an improvement: 
# seniority, experience & type. The final trained model will be named predict_eta
CREATE OR REPLACE MODEL `helpdesk.predict_eta`
OPTIONS(model_type='linear_reg') AS
SELECT
 seniority,
 experience,
 category,
 type,
 resolutiontime as label
FROM
  `helpdesk.issues`

#  to evaluate the updated machine learning model you just created:
WITH eval_table AS (
SELECT
 seniority,
 experience,
 category,
 type,
 resolutiontime as label
FROM
  helpdesk.issues
)
SELECT
  *
FROM
  ML.EVALUATE(MODEL helpdesk.predict_eta,
    TABLE eval_table)


# to get a prediction of resolution time for a given scenario:
WITH pred_table AS (
SELECT
  5 as seniority,
  '3-Advanced' as experience,
  'Billing' as category,
  'Request' as type
)
SELECT
  *
FROM
  ML.PREDICT(MODEL `helpdesk.predict_eta`,
    TABLE pred_table)





# Task 2. Create a Dialogflow agent
# In a new browser tab, create an Agent at Dialogflow.]
# Go to Dialogflow.com.
# If required, click Sign-in with Google, then use the credentials you logged into this lab with.
# Check Yes, I have read and accept the agreement, and then Accept the agreement.
# In the left menu, click on Create Agent.
# Name your agent and select other properties such as language and time zone.
# Set Google Project to your Qwiklabs ID.
# When you're ready, click Create.



# Task 3. Import intents & entities for a simple helpdesk agent
# Import an IT helpdesk agent
# Download settings file from GitHub and save it to your local computer.
# Still in the Diagflow console, click the hamburger icon in the top left to open the left panel.
# Click the gear icon (Gear icon) next to your existing agent.
# Click on Export and Import tab from the list of settings.
# Select Import from zip.
# Select the ml-helpdesk-agent.zip file from your local computer.
# Type IMPORT in the given textbox and click Import.
# Click Done.
# Once the import completes, use the left panel to navigate to Intents.
# Submit Ticket is the main intent, which has the follow-up intents Submit Ticket - Email and Submit Ticket - Issue Category.
# Submit Ticket - Email is used to collect a user's email address.
# Submit Ticket - Issue Category is used to collect the issue description from the user and automatically infer a support category.
# Use the left panel to navigate to Entities and look at the @category entity.




# Task 4. Use the Inline Editor to create a fulfillment that integrates with BigQuery
# Click on Fulfillment in the left panel and switch the Inline Editor toggle to Enabled.
# Note: You may get an error saying "Your Google Cloud resources are still being provisioned, 
# please refresh the page and try again in a few minutes". If you do, just wait a short time and reload your page.
# paste it in the index.js tab, replacing the existing content:

/**
* Copyright 2020 Google Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

"use strict";

const functions = require("firebase-functions");
const { WebhookClient } = require("dialogflow-fulfillment");
const { Card, Payload } = require("dialogflow-fulfillment");
const { BigQuery } = require("@google-cloud/bigquery");

const bigquery = new BigQuery({
    projectId: "your-project-id" // ** CHANGE THIS **
});

process.env.DEBUG = "dialogflow:debug";

function welcome(agent) {
    agent.add(`Welcome to my agent!`);
}

function fallback(agent) {
    agent.add(`I didn't understand`);
    agent.add(`I'm sorry, can you try again?`);
}


async function etaPredictionFunction(agent) {

    const issueCategory = agent.getContext('submitticket-email-followup').parameters.category;
    const sqlQuery = `WITH pred_table AS (SELECT 5 as seniority, "3-Advanced" as experience,
    @category as category, "Request" as type)
    SELECT cast(predicted_label as INT64) as predicted_label
    FROM ML.PREDICT(MODEL helpdesk.predict_eta,  TABLE pred_table)`;
    const options = {
        query: sqlQuery,
        location: "US",
        params: {
            category: issueCategory
        }
    };

    const [rows] = await bigquery.query(options);

    return rows;
}

async function ticketCollection(agent) {

    const email = agent.getContext('submitticket-email-followup').parameters.email;
    const issueCategory = agent.getContext('submitticket-email-followup').parameters.category;

    let etaPrediction = await etaPredictionFunction(agent);

    agent.setContext({
        name: "submitticket-collectname-followup",
        lifespan: 2
    });

    agent.add(`Your ticket has been created. Someone will contact you shortly at ${email}.
    The estimated response time is ${etaPrediction[0].predicted_label} days.`);

}

exports.dialogflowFirebaseFulfillment = functions.https.onRequest((request, response) => {
    const agent = new WebhookClient({ request, response });
    console.log('Dialogflow Request headers: ' + JSON.stringify(request.headers));
    console.log('Dialogflow Request body: ' + JSON.stringify(request.body));
    let intentMap = new Map();
    intentMap.set("Default Welcome Intent", welcome);
    intentMap.set("Default Fallback Intent", fallback);
    intentMap.set("Submit Ticket - Issue Category", ticketCollection);
    agent.handleRequest(intentMap);
});




# While in this file update the BIGQUERY_CLIENT variable.
# Replace your-project-id with your Project ID.

# Copy the following code and paste it in the package.json tab, replacing the existing content:


{
  "name": "dialogflowFirebaseFulfillment",
  "description": "This is the default fulfillment for a Dialogflow agents using Cloud Functions for Firebase",
  "version": "0.0.1",
  "private": true,
  "license": "Apache Version 2.0",
  "author": "Google Inc.",
  "engines": {
    "node": "10"
  },
  "scripts": {
    "start": "firebase serve --only functions:dialogflowFirebaseFulfillment",
    "deploy": "firebase deploy --only functions:dialogflowFirebaseFulfillment"
  },
  "dependencies": {
    "actions-on-google": "^2.2.0",
    "firebase-admin": "^5.13.1",
    "firebase-functions": "^2.0.2",
    "dialogflow": "^0.6.0",
    "dialogflow-fulfillment": "^0.5.0",
    "@google-cloud/bigquery": "^4.7.0"
  }
}


# Click the Deploy button. Wait until you see a message that the deployment was successful. This may take a few minutes.
# Note: If the deployment fails, try refreshing and clicking Deploy one more time.




# Task 5. Enable webhook for fulfillment
# Go back to Intents in the left panel.
# Click the down arrow next to Submit Ticket to reveal its follow-up intents.
# Click on the last follow-up intent Submit Ticket - Issue Category to open it for editing.
# Scroll to the bottom, in the Fulfillment section, verify that Enable webhook call for this intent is turned on.


# Task 6. Test your chatbot
# At this point, the Dialogflow should be set up.
# Test it in the Try it now panel on the right by typing in the following conversation, one line at a time:

Hi
I would like to submit a ticket
My email is student@qwiklabs.net
I can't login


# Task 7. Understanding the BigQuery integration
# Note: Extra credit
# Change the fulfillment script so that your response time prediction is based on a user with 2 as seniority instead of 5. Then retest the bot.
# How does this change the Estimated ETA?



# Task 8. Test using a one-click integration
# Dialogflow provides many types of integrations for your chatbot. Take a look now at a sample web user interface.
# Click on Integrations in the Dialogflow left panel.
# Click the Web Demo integration.
# Click Enable .
# Click on the URL link to launch Web Demo:


#  Start chatting with the chatbot using the following conversation:

Type "Hi" and hit Enter. The chatbot should respond as before.
Then enter/say "Submit ticket"
Provide the name "My email is student@qwiklabs.net"
Provide the ticket details of "My printer is broken"

