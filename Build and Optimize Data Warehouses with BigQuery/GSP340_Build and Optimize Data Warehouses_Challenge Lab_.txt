Task 1
Create a table partitioned by date
The starting point for the machine learning model will be the oxford_policy_tracker table in the COVID 19 Government Response public dataset which contains details of different actions taken by governments to curb the spread of Covid-19 in their jurisdictions.

Given the fact that there will be models based on a range of time periods, you have to create a dataset and then create a date partitioned version of the oxford_policy_tracker table in your newly created dataset, with an expiry time set to 1080 days.

While creating a table, you have also been instructed to exclude the United Kingdom ( alpha_3_code=GBR), Brazil ( alpha_3_code=BRA), Canada ( alpha_3_code=CAN) & the United States of America (alpha_3_code=USA) as these will be subject to more in-depth analysis through nation and state specific analysis.

Create a new dataset covid and create a table oxford_policy_tracker in that dataset partitioned by date, with an expiry of 1080 days. The table should initially use the schema defined for the oxford_policy_tracker table in the COVID 19 Government Response public dataset .
You must also populate the table with the data from the source table for all countries and exclude the United Kingdom (GBR), Brazil (BRA), Canada (CAN) and the United States (USA) as instructed above.


***
# In the Google Cloud Console, select Navigation menu > BigQuery.
# The Welcome message box opens. This message box provides a link to the quickstart guide and the release notes.
# Click Done.
# In the left pane, click on the name of your BigQuery project (qwiklabs-gcp-xxxx).
# Click on the three dots next to your project name, then select Create dataset.
# Set the Dataset ID to __________, leave all other options at their default values.
# Click Create dataset.


CREATE OR REPLACE TABLE covid.oxford_policy_tracker
PARTITION BY date
OPTIONS(
  partition_expiration_days=_____
) AS
SELECT *
FROM `bigquery-public-data.covid19_govt_response.oxford_policy_tracker`
WHERE alpha_3_code NOT IN ('GBR','BRA','CAN','USA');





Task 2
Add new columns to global_mobility_tracker_data table
In this step you need to add columns for population, country_area and a record column (named mobility) that will take six input fields representing average mobility data from the last six columns of the mobility_report table from the Google COVID 19 Mobility public dataset.

It is important to follow the column names and data types that have been specified when updating the schema for the table provided in the task description.

The dataset named 'covid_data' contains a table named global_mobility_tracker_data in which update the table to add new columns with the appropriate data types to ensure alignment with the specification provided to you:

New Column Name	SQL Data Type
population	INTEGER
country_area	FLOAT
mobility	RECORD
mobility.avg_retail	FLOAT
mobility.avg_grocery	FLOAT
mobility.avg_parks	FLOAT
mobility.avg_transit	FLOAT
mobility.avg_workplace	FLOAT
mobility.avg_residential	FLOAT
Note: In case you're unable to view pre-created resources in bigquery as per the task description,"your Google Cloud resources are still being provisioned, please refresh the page and try again in a few minutes." If you do, just wait a short time and reload your page.

***
ALTER TABLE covid_data.global_mobility_tracker_data
ADD COLUMN population INT64,
ADD COLUMN country_area FLOAT64,
ADD COLUMN mobility STRUCT<
   avg_retail      FLOAT64,
   avg_grocery     FLOAT64,
   avg_parks       FLOAT64,
   avg_transit     FLOAT64,
   avg_workplace   FLOAT64,
   avg_residential FLOAT64
>
***



Task 3
Add country population data to the population column
A colleague working on an ancillary task has provided you with the SQL they used for updating the daily new case data in a similar data partitioned table through a JOIN with the covid_19_geographic_distribution_worldwide table from the European Center for Disease Control COVID 19 public dataset.

This is a useful table that contains a range of data, including recent national population data, which you need to populate the population column in the table provided in task description:

UPDATE
dataset.table_name t0
SET
t0.population = t2.pop_data_2019
FROM
(SELECT DISTINCT country_territory_code, pop_data_2019 FROM `bigquery-public-data.covid19_ecdc.covid_19_geographic_distribution_worldwide`) AS t2
WHERE t0.alpha_3_code = t2.country_territory_code;
The above template updates a daily new case column so you must modify it before you can use it to populate the population data but the final query will be very similar.

The dataset named 'covid_data' contains one table named consolidate_covid_tracker_data in which add the country population data to the population column in 'consolidate_covid_tracker_data' table with covid_19_geographic_distribution_worldwide table data from the European Center for Disease Control COVID 19 public dataset.
Note: In case you're unable to view pre-created resources in bigquery as per the task description,"your Google Cloud resources are still being provisioned, please refresh the page and try again in a few minutes." If you do, just wait a short time and reload your page.


***
CREATE OR REPLACE TABLE covid_data.consolidate_covid_tracker_data AS
SELECT
  country_territory_code,
  pop_data_2019
FROM 
  `bigquery-public-data.covid19_ecdc.covid_19_geographic_distribution_worldwide`
GROUP BY
  country_territory_code,
  pop_data_2019
ORDER BY
  country_territory_code;


***
UPDATE
covid_data.consolidate_covid_tracker_data t0
SET
population = t1.pop_data_2019
FROM
`covid_data.pop_data_2019` t1
WHERE t0.alpha_3_code = t1.country_territory_code;




Task 4
Add country area data to the country_area column
In the step, you need to add in country area data to table provided in the task description. The data for geographic country areas can be found in the country_names_area table from the Census Bureau International public dataset.

Within the BigQuery dataset named 'covid_data', add the country area data to the country_area column in 'consolidate_covid_tracker_data' table with country_names_area table data from the Census Bureau International public dataset.
Note: In case you're unable to view pre-created resources in bigquery as per the task description,"your Google Cloud resources are still being provisioned, please refresh the page and try again in a few minutes." If you do, just wait a short time and reload your page.

***
UPDATE
   `covid_data.consolidate_covid_tracker_data` t0
SET
   t0.country_area = t1.country_area
FROM
   `bigquery-public-data.census_bureau_international.country_names_area` t1
WHERE
   t0.country_name = t1.country_name




Tip 1. Remember that if you are instructed to create table you must exclude the United Kingdom (GBR), Brazil (BRA), Canada (CAN) and the United States (USA) data.
Tip 2. If you are updating the schema for a BigQuery table you can use the console to add the columns and record elements or you can use the command line bqutility to update the schema by providing a JSON file with all of field definitions as explained in the BigQuery Standard SQL reference documentation.
Tip 3. The covid19_ecdc table in the European Center for Disease Control COVID 19 public dataset contains a population column that you can use if you are populating the populationcolumn based on your task description.
Tip 4. The country_names_area table from the Census Bureau International public dataset does not contain a three letter country code column, but you can join it to table provided in task description using the full text country_name column that exists in both tables.
Tip 5. If you are updating the mobility record remember that you must select (and average) a number of records for each country and date combination so that you get a single average of each child column in the mobility record. You must join the resulting data to your working table using the same combination of country name and date that you used to group the source mobility records to ensure there is a unique mapping between the averaged source mobility table results and the records in your table that have a single entry for each country and date combination.
TIP 6. The UNION option followed by the ALL keyword combines the results of two queries where each query lists distinct results without combining duplicate results that arise from the union into a single row.
Congratulations!