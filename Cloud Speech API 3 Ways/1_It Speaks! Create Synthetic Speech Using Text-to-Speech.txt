The Text-to-Speech API lets you create audio files of machine-generated, or synthetic, human speech. You provide the content as text or Speech Synthesis Markup Language (SSML), specify a voice (a unique 'speaker' of a language with a distinctive tone and accent), and configure the output; the Text-to-Speech API returns to you the content that you sent as spoken word, audio data, delivered by the voice that you specified.

###
Click Activate Cloud Shell Activate Cloud Shell icon at the top of the Google Cloud console.
(Optional) You can list the active account name with this command:
gcloud auth list
Click Authorize.
(Optional) You can list the project ID with this command:
gcloud config list project
Set the region for your project
gcloud config set compute/region us-central1


###
Task 1. Enable the Text-to-Speech API
In the Navigation menu (Navigation menu icon), click APIs and Services > Enable APIs and Services.
On the top of the Dashboard, click +Enable APIs and Services.
Enter "text-to-speech" in the search box.
Click Cloud Text-to-Speech API.
Click Enable to enable the Cloud Text-to-Speech API.


###
Task 2. Create a virtual environment
Install the virtualenv environment:
sudo apt-get install -y virtualenv
Build the virtual environment:
python3 -m venv venv
Activate the virtual environment.
source venv/bin/activate


###
Task 3. Create a service account
To create a service account, run the following command in Cloud Shell:
gcloud iam service-accounts create tts-qwiklab

Now generate a key to use that service account:
gcloud iam service-accounts keys create tts-qwiklab.json --iam-account tts-qwiklab@Project ID.iam.gserviceaccount.com

Finally, set the GOOGLE_APPLICATION_CREDENTIALS environment variable to the location of your key file:
export GOOGLE_APPLICATION_CREDENTIALS=tts-qwiklab.json


###
Task 4. Get a list of available voices
The following curl command gets the list of all the voices you can select from when creating synthetic speech using the Text-to-Speech API:
curl -H "Authorization: Bearer "$(gcloud auth application-default print-access-token) \
    -H "Content-Type: application/json; charset=utf-8" \
    "https://texttospeech.googleapis.com/v1/voices"


The Text-to-Speech API returns a JSON-formatted result that looks similar to the following:

{
  "voices": [
    {
      "languageCodes": [
        "es-ES"
      ],
      "name": "es-ES-Standard-A",
      "ssmlGender": "FEMALE",
      "naturalSampleRateHertz": 24000
    },
    {
      "languageCodes": [
        "ja-JP"
      ],
      "name": "ja-JP-Standard-A",
      "ssmlGender": "FEMALE",
      "naturalSampleRateHertz": 22050
    },
    {
      "languageCodes": [
        "pt-BR"
      ],
      "name": "pt-BR-Standard-A",
      "ssmlGender": "FEMALE",
      "naturalSampleRateHertz": 24000
    },
    ...
  ]
}


###
To scope the results returned from the API to just a single language code, run:
curl -H "Authorization: Bearer "$(gcloud auth application-default print-access-token) \
    -H "Content-Type: application/json; charset=utf-8" \
    "https://texttospeech.googleapis.com/v1/voices?language_code=en"




###
Task 5. Create synthetic speech from text
you build your request to the Text-to-Speech API in a text file titled synthesize-text.json.
Create this file in Cloud Shell by running the following command:
touch synthesize-text.json
nano synthesize-text.json


Using a line editor (for example nano, vim, or emacs) or the Cloud Shell code editor, add the following code to synthesize-text.json:

{
    'input':{
        'text':'Cloud Text-to-Speech API allows developers to include
           natural-sounding, synthetic human speech as playable audio in
           their applications. The Text-to-Speech API converts text or
           Speech Synthesis Markup Language (SSML) input into audio data
           like MP3 or LINEAR16 (the encoding used in WAV files).'
    },
    'voice':{
        'languageCode':'en-gb',
        'name':'en-GB-Standard-A',
        'ssmlGender':'FEMALE'
    },
    'audioConfig':{
        'audioEncoding':'MP3'
    }
}


Save the file and exit the line editor.
CTRL+X, Y, ENTER

Use the following code to call the Text-to-Speech API using the curl command:

curl -H "Authorization: Bearer "$(gcloud auth application-default print-access-token) \
  -H "Content-Type: application/json; charset=utf-8" \
  -d @synthesize-text.json "https://texttospeech.googleapis.com/v1/text:synthesize" \
  > synthesize-text.txt


The output of this call is saved to a file called synthesize-text.txt.

Open the synthesize-text.txt file. Notice that the Text-to-Speech API provides the audio output in base64-encoded text assigned to the audioContent field, similar to what's shown below:
{
  "audioContent": "//NExAASGoHwABhGudEACdzqFXfRE4EY3AACkD/zX4ADf/6J/[...]"
}


To translate the response into audio, you need to select the audio data it contains and decode it into an audio file - for this lab, MP3. 
Although there are many ways that you can do this, in this lab you'll use some simple Python code. 
Create a file named tts_decode.py:
touch tts_decode.py

nano tts_decode.py


Using a line editor (for example nano, vim, or emacs) or the Cloud Shell code editor, add the following code into tts_decode.py:

import argparse
from base64 import decodebytes
import json

"""
Usage:
        python tts_decode.py --input "synthesize-text.txt" \
        --output "synthesize-text-audio.mp3"

"""

def decode_tts_output(input_file, output_file):
    """ Decode output from Cloud Text-to-Speech.

    input_file: the response from Cloud Text-to-Speech
    output_file: the name of the audio file to create

    """

    with open(input_file) as input:
        response = json.load(input)
        audio_data = response['audioContent']

        with open(output_file, "wb") as new_file:
            new_file.write(decodebytes(audio_data.encode('utf-8')))

if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description="Decode output from Cloud Text-to-Speech",
        formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('--input',
                       help='The response from the Text-to-Speech API.',
                       required=True)
    parser.add_argument('--output',
                       help='The name of the audio file to create',
                       required=True)

    args = parser.parse_args()
    decode_tts_output(args.input, args.output)



Save tts_decode.py and exit the line editor.
CTRL+X, Y, ENTER

Now, to create an audio file from the response you received from the Text-to-Speech API, run the following command from Cloud Shell:
python tts_decode.py --input "synthesize-text.txt" --output "synthesize-text-audio.mp3"

This creates a new MP3 file named synthesize-text-audio.mp3.

To listen to the file, you create a Web server hosting a simple web page that embeds the file as playable audio (from an HTML <audio> control).
Create a new file called index.html:
touch index.html
nano index.html


Using a line editor (for example nano, vim, or emacs) or the Cloud Shell code editor, add the following code into index.html:

<html>
  <body>
  <h1>Cloud Text-to-Speech codelab</h1>
  <p>
  Output from synthesizing text:
  </p>
  <audio controls>
  <source src="synthesize-text-audio.mp3" />
  </audio>
  </body>
</html>
</ql-code-block>


Save the file and exit the line editor.
CTRL+X, Y, ENTER

Back in Cloud Shell, start a simple Python HTTP server from the command prompt:
python -m http.server 8080


Finally, click Web Preview (Web preview icon).
Then select Preview on port 8080 from the displayed menu.
Play the audio embedded on the page. You'll hear the synthetic voice speak the text that you provided to it!
When you're done listening to the audio files, you can shut down the HTTP server by pressing CTRL+C in Cloud Shell.
Ctrl+C


###
Task 6. Create synthetic speech from SSML
In addition to using text, you can also provide input to the Text-to-Speech API in the form of Speech Synthesis Markup Language (SSML). SSML defines an XML format for representing synthetic speech. Using SSML input, you can more precisely control pauses, emphasis, pronunciation, pitch, speed, and other qualities in the synthetic speech output.
First, build your request to the Text-to-Speech API in a text file titled synthesize-ssml.json. Create this file in Cloud Shell by running the following command:
touch synthesize-ssml.json
nano synthesize-ssml.json

Using a line editor (for example nano, vim, or emacs) or the Cloud Shell code editor, paste the following JSON into synthesize-ssml.json:

{
    'input':{
        'ssml':'<speak><s>
           <emphasis level="moderate">Cloud Text-to-Speech API</emphasis>
           allows developers to include natural-sounding
           <break strength="x-weak"/>
           synthetic human speech as playable audio in their
           applications.</s>
           <s>The Text-to-Speech API converts text or
           <prosody rate="slow">Speech Synthesis Markup Language</prosody>
           <say-as interpret-as=\"characters\">SSML</say-as>
           input into audio data
           like <say-as interpret-as=\"characters\">MP3</say-as> or
           <sub alias="linear sixteen">LINEAR16</sub>
           <break strength="weak"/>
           (the encoding used in
           <sub alias="wave">WAV</sub> files).</s></speak>'
    },
    'voice':{
        'languageCode':'en-gb',
        'name':'en-GB-Standard-A',
        'ssmlGender':'FEMALE'
    },
    'audioConfig':{
        'audioEncoding':'MP3'
    }
}

CTRL+X, Y, ENTER

In Cloud Shell use the following code to call the Text-to-Speech API, which saves the output to a file called synthesize-ssml.txt:

curl -H "Authorization: Bearer "$(gcloud auth application-default print-access-token) \
  -H "Content-Type: application/json; charset=utf-8" \
  -d @synthesize-ssml.json "https://texttospeech.googleapis.com/v1/text:synthesize" \
  > synthesize-ssml.txt


Again, you need to decode the output from the Text-to-Speech API before you can hear the audio.
Run the following command to generate an audio file named synthesize-ssml-audio.mp3 using the tts_decode.py utility that you created previously:
python tts_decode.py --input "synthesize-ssml.txt" --output "synthesize-ssml-audio.mp3"

Next, open the index.html file that you created earlier. 
nano index.html

Replace the contents of the file with the following HTML:

<html>
  <body>
  <h1>Cloud Text-to-Speech Demo</h1>
  <p>
  Output from synthesizing text:
  </p>
  <audio controls>
    <source src="synthesize-text-audio.mp3" />
  </audio>
  <p>
  Output from synthesizing SSML:
  </p>
  <audio controls>
    <source src="synthesize-ssml-audio.mp3" />
  </audio>
  </body>
</html>

CTRL+X, Y, ENTER

Then, start a simple Python HTTP server from the Cloud Shell command prompt:
python -m http.server 8080


As before, click Web Preview Web Preview icon and then select the port number from the displayed menu. 

Play the two embedded audio files. Notice the differences in the SSML output: although both audio files say the same words, the SSML output speaks them a bit differently, adding pauses and different pronunciations for abbreviations.
Ctrl+C




###
Task 7. Configure audio output and device profiles
Going beyond SSML, you can provide even more customization to your synthetic speech output created by the Text-to-Speech API. You can specify other audio encodings, change the pitch of the audio output, and even request that the output be optimized for a specific type of hardware.

Build your request to the Text-to-Speech API in a text file titled synthesize-with-settings.json:
Create this file in Cloud Shell by running the following command:
touch synthesize-with-settings.json
nano synthesize-with-settings.json

Using a line editor (for example nano, vim, or emacs) or the Cloud Shell code editor, paste the following JSON into synthesize-with-settings.json:
{
    'input':{
        'text':'The Text-to-Speech API is ideal for any application
          that plays audio of human speech to users. It allows you
          to convert arbitrary strings, words, and sentences into
          the sound of a person speaking the same things.'
    },
    'voice':{
        'languageCode':'en-us',
        'name':'en-GB-Standard-A',
        'ssmlGender':'FEMALE'
    },
    'audioConfig':{
      'speakingRate': 1.15,
      'pitch': -2,
      'audioEncoding':'OGG_OPUS',
      'effectsProfileId': ['headphone-class-device']
    }
}


Save the file and exit the line editor.
CTRL+X, Y, ENTER

Use the following code to call the Text-to-Speech API using the curl command:

curl -H "Authorization: Bearer "$(gcloud auth application-default print-access-token) \
  -H "Content-Type: application/json; charset=utf-8" \
  -d @synthesize-with-settings.json "https://texttospeech.googleapis.com/v1beta1/text:synthesize" \
  > synthesize-with-settings.txt


The output of this call is saved to a file called synthesize-with-settings.txt.

Run the following command to generate an audio file named synthesize-with-settings-audio.mp3 from the output received from the Text-to-Speech API:
python tts_decode.py --input "synthesize-with-settings.txt" --output "synthesize-with-settings-audio.ogg"


Next open the index.html file that you created earlier 
nano index.html

and replace the contents of the file with the following HTML:
<html>
  <body>
  <h1>Cloud Text-to-Speech Demo</h1>
  <p>
  Output from synthesizing text:
  </p>
  <audio controls>
    <source src="synthesize-text-audio.mp3" />
  </audio>
  <p>
  Output from synthesizing SSML:
  </p>
  <audio controls>
    <source src="synthesize-ssml-audio.mp3" />
  </audio>
  </body>
  <p>
  Output with audio settings:
  </p>
  <audio controls>
    <source src="synthesize-with-settings-audio.ogg" />
  </audio>
</html>

CTRL+X, Y, ENTER

Now, restart the Python HTTP server from the Cloud Shell command prompt:
python -m http.server 8080


As before, click Web Preview Web Preview icon then select the port number from the displayed menu.
Play the third embedded audio file. Notice that the voice on the audio speaks a bit faster and lower than the previous examples.


Congratulations!
You have learned how to create synthetic speech using the Cloud Text-to-Speech API. You learned about:
Listing all of the synthetic voices available through the Text-to-Speech API
Creating a Text-to-Speech API request and calling the API with curl, providing both text and SSML
Configuring the setting for audio output, including specifying a device profile for audio playback