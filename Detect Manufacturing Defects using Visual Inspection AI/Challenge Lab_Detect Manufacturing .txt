Challenge Lab_Detect Manufacturing Defects using Visual Inspection AI: Challenge Lab


Challenge scenario
Your manager has asked you to help develop a system that will be used to analyse images taken on the production like to identify defects such as scratches, dents, deformations, etc. using a pre-prepared Google Visual Inspection Cosmetic Inspection model. The Visual Inspection model and solution artifact have been prepared by another member of your team and reside in shared resource project that you have access to.
Your challenge is to deploy the solution artifact and test that it can successfully identify both mobile phones that have cosmetic defects (defective mobile phones) and mobile phones that do not have cosmetic defects (non-defective mobile phones).

###
Sample defects

You are expected to have the skills and knowledge for these tasks, so don't expect step-by-step guides to be provided.
Your challenge
A number of sample images of mobile phones from your company's assembly line have been taken by one of your teammates and stored in a cloud storage bucket. The location of this cloud storage bucket has been shared with you. You have also been provided with a pre-configured Compute Engine virtual machine instance that you must use to deploy and test the pre-prepared Cosmetic Inspection anomaly defection solution artifact. You have also been provided with a script that you must use to process the images by calling Visual Inspection AI rest APIs via the solution artifact container.
This challenge expects you to;
Deploy the exported Cosmetic Inspection anomaly detection solution artifact in the Compute Engine virtual machine instance.
Identify a defective mobile phone.
Identify a non-defective mobile phone.


###
Activate Cloud Shell
Click Activate Cloud Shell  at the top of the Google Cloud console.
	gcloud auth list
Click Authorize.
(Optional) You can list the project ID with this command:
	gcloud config list project



###
Task 1. Deploy the exported Cosmetic Inspection anomaly detection solution artifact
# Your first task is to connect to the Compute Engine virtual machine instance and run the pre-prepared solution artifact container locally inside that virtual machine.
# You can map these ports to locally available ports in the virtual machine instance environment when starting the container with Docker using the command line switches -v 9000:8602 or -v 3006:8603.
# You must now deploy the exported solution container that was prepared for you in order to test it by downloading and running it locally in the Compute Engine virtual machine instance with the following configurations:

Name
Value
Container name
mobile_inspection
Container Registry location
gcr.io/ql-shared-resources-test/defect_solution@sha256:776fd8c65304ac017f5b9a986a1b8189695b7abbff6aa0e4ef693c46c7122f4c

***
gcloud compute ssh lab-vm --zone us-west1-c

Type Y 

export DOCKER_TAG=gcr.io/ql-shared-resources-test/defect_solution@sha256:776fd8c65304ac017f5b9a986a1b8189695b7abbff6aa0e4ef693c46c7122f4c

export VISERVING_CPU_DOCKER_WITH_MODEL=${DOCKER_TAG}
export HTTP_PORT=8602
export LOCAL_METRIC_PORT=8603

docker pull ${VISERVING_CPU_DOCKER_WITH_MODEL}

docker run -v /secrets:/secrets --rm -d --name "mobile_inspection" \
--network="host" \
-p ${HTTP_PORT}:8602 \
-p ${LOCAL_METRIC_PORT}:8603 \
-t ${VISERVING_CPU_DOCKER_WITH_MODEL} \
--metric_project_id="${PROJECT_ID}" \
--use_default_credentials=false \
--service_account_credentials_json=/secrets/assembly-usage-reporter.json


# Confirm that the container is running in your virtual machine instance:
docker container ls





###
Task 2. Prepare resources to serve the exported assembly inspection solution artifact
# Copy the prediction script
Copy the file prediction_script.py to your virtual machine instance to process images by calling Visual Inspection AI rest APIs via the solution artifact container:
gsutil cp gs://cloud-training/gsp895/prediction_script.py .



The Python script takes the following parameters that must be set correctly when executing it:
Name
Description
--input_image_file
Path to the image file to run predictions against.
--port
The port for http traffic.
--output_result_file
Path to the output file containing predictions.

###
Create a Cloud Storage bucket and copy images to it
# Create a Cloud Storage bucket named Bucket Name.
Copy the folder containing the images of your product to your bucket from the following location: gs://cloud-training/gsp897/cosmetic-test-data into a folder called /cosmetic-test-data in your Cloud Storage bucket.

# create bucket
export PROJECT_ID=$(gcloud config get-value core/project)
gsutil mb gs://${PROJECT_ID}

# copy
gsutil -m cp gs://cloud-training/gsp897/cosmetic-test-data/*.png \
gs://${PROJECT_ID}/cosmetic-test-data/





###
Task 3. Identify a defective product image
In this task, you must identify one defective product using the python script to process images stored in your cloud storage bucket. Store the prediction result that identifies a defective product in a file called Defective result file stored in the HOME directory of your Compute Engine virtual machine.
Note: To find a defective image look for a file that returns at least one annotation object with the property annotationSpecDisplayName equal to scratch or dent. The prepared solution artifact has been trained to identify these defect types and use those labels when a defect is found.
A non-defective image result file will not contain either of those labels.

# defective_product.json
# Two files that you should focus on are IMG_0769.png and IMG_07703.png.

***
gsutil cp gs://${PROJECT_ID}/cosmetic-test-data/IMG_0769.png
gsutil cp gs://${PROJECT_ID}/cosmetic-test-data/IMG_07703.png

***
#In the terminal, run the following command to send the selected image as a request to the solution artifact container:
python3 ./prediction_script.py --input_image_file=./IMG_07703.png  --port=8602 --output_result_file=defective_product.json



###
Task 4. Identify a non-defective product
In this task, you should identify one non-defective product using the python script to process images stored in your cloud storage bucket. Store the prediction result that identifies a non-defective product in a file called Non-defective result file stored in the HOME directory of your Compute Engine virtual machine.

***
#In the terminal, run the following command to send the selected image as a request to the solution artifact container:
python3 ./prediction_script.py --input_image_file=./IMG_0769.png  --port=8602 --output_result_file=non_defective_product.json





Congratulations!
Over the course of this challenge lab you have demonstrated your knowledge of working with Visual Inspection AI.

